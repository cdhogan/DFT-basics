#!/usr/bin/env bash
#Every 1st line of a bash script start with #! followed by the shell that should run the script

source ../../ENVIRONMENT_VARIABLES		#Load variables/code present in a different file
echo "BIN_DIR:" $BIN_DIR			#echo -> print a string to the stdout
						#$NAME -> recal the value of a variable of name NAME
echo "PSEUDO_DIR:" $PSEUDO_DIR
echo "TMP_DIR:" $TMP_DIR
echo "Parallel command:" $RUN_COMMAND
echo "Started at: " `date`

# Prepare the files to be plotted
SAVE=Etot_vs_Ecut-script.dat				#NAME=something assign a variable of name NAME and value something (can be a string ora  number)
						#!!!!!! There must be no spaces when assigning variable
						#Use "... ..." for a string with spaces
echo -e "# Ecut(Ry)\tEnergy(Ry)" > $SAVE	# COMMAND > NAME  write the stdout of the command COMMAND into the file NAME
						#Create the file if it does not exist
						#Overwrite the file it exist
						#Use >> to append at the end of the file

GAP=Gap_vs_Ecut-script.dat
echo -e "# Ecut(Ry)\tVBM\tCBM\tGap (eV)" > $GAP	

# Loop over cutoff energies
for ecut in 5 10 15 20 25 30 40 50 60 70 80 90 100; do		#for NAME in LIST; do ... done
						#cicle the variable NAME in a list of elements

IN=H2O_script.scf.in
OUT=H2O_script.scf.out_Ecut$ecut
						#<<DELIM  ... DELIM   defines a block of text
						#Will still resolve variables values using $NAME
						#cat NAME/TEXT   read a file or string/block of text and print it into the stdout
# self-consistent calculation
cat > $IN << EOF
&CONTROL
  calculation  = "scf",
  prefix       = "H2O",
  pseudo_dir   = "$PSEUDO_DIR",
  pseudo_dir   = "./",
  outdir       = "$TMP_DIR",
  verbosity    = 'high'
/
&SYSTEM
  ibrav     = 0,
  nat       = 3,
  ntyp      = 2,
  ecutwfc   = $ecut
  nbnd      = 5
/
&ELECTRONS
/
CELL_PARAMETERS {angstrom}
 8.0  0.0  0.0
 0.0  8.0  0.0
 0.0  0.0  8.0
ATOMIC_SPECIES
H  1.00  H_ONCV_PBE-1.2.upf
O  6.00  O_ONCV_PBE-1.2.upf 
ATOMIC_POSITIONS (angstrom)
H  3.3  4.0  4.7    
O  4.0  4.0  4.0    
H  4.7  4.0  4.7  
K_POINTS {Gamma}
EOF
#ATOMIC_POSITIONS {angstrom}

echo -e "\tStart: " `date`
COMMAND="  $RUN_COMMAND $BIN_DIR/pw.x"
echo -e "\t\t$COMMAND < $IN > $OUT"
$COMMAND < $IN > $OUT
echo -e "\tEnd: " `date`

ENERGY=`cat $OUT | grep ! | tr -dc '0-9,-.'`		#COMMAND1 | COMMAND2   pipe stdout of COMMAND1 into the stdin of COMMAND2
							#grep TEXT   look for every line containing the text TEXT and print it in the stdout
							#tr -dc LIST  (delete complementary)  deletes every character that is not present 
							#in the list LIST
echo -e "$ecut\t\t$ENERGY" >> $SAVE

BANDS=`cat $OUT | grep highest | awk '{print $7,$8,$8-$7}'`
echo -e "$ecut\t\t$BANDS" >> $GAP

done    # end of main loop over cutoff energy

echo "Run completed at: " `date`
echo "Now run the run_plots script" 

